name: CI/CD for crawling

on:
  push:
    branches:
      - dev/crawling/all

jobs:
  build-and-push:
    name: Build and Push Docker Images to AWS ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3


      # AWS 자격 증명 구성
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      # ECR 로그인 # ECR 퍼블릭은 us-east-1리전만 동작 프라이빗변경 필요
      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
           aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/u5b2p7i3


      # docker images build or ECR push
      - name: Delete Existing Link Crawler Image
        run: |
          aws ecr-public batch-delete-image --repository-name job_scanner/crawling \
          --image-ids imageTag=link_crawler || echo "No existing link_crawler image to delete."

      - name: Build and Push Link Crawler Image
        run: |
          docker build --no-cache -t public.ecr.aws/u5b2p7i3/job_scanner/crawling:link_crawler -f $GITHUB_WORKSPACE/Dockerfile $GITHUB_WORKSPACE
          docker push public.ecr.aws/u5b2p7i3/job_scanner/crawling:link_crawler

      - name: Delete Existing Post Crawler Image
        run: |
          aws ecr-public batch-delete-image --repository-name job_scanner/crawling \
          --image-ids imageTag=post_crawler || echo "No existing post_crawler image to delete."

      - name: Build and Push Post Crawler Image
        run: |
          docker build --no-cache -t public.ecr.aws/u5b2p7i3/job_scanner/crawling:post_crawler -f $GITHUB_WORKSPACE/Dockerfile $GITHUB_WORKSPACE
          docker push public.ecr.aws/u5b2p7i3/job_scanner/crawling:post_crawler

      - name: Delete Existing Text Crawler Image
        run: |
          aws ecr-public batch-delete-image --repository-name job_scanner/crawling \
          --image-ids imageTag=text_crawler || echo "No existing text_crawler image to delete."

      - name: Build and Push Text Crawler Image
        run: |
          docker build --no-cache -t public.ecr.aws/u5b2p7i3/job_scanner/crawling:text_crawler -f $GITHUB_WORKSPACE/Dockerfile $GITHUB_WORKSPACE
          docker push public.ecr.aws/u5b2p7i3/job_scanner/crawling:text_crawler

      - name: Delete Existing Extract Crawler Image
        run: |
          aws ecr-public batch-delete-image --repository-name job_scanner/crawling \
          --image-ids imageTag=extract_crawler || echo "No existing extract_crawler image to delete."

      - name: Build and Push Text Crawler Image
        run: |
          docker build --no-cache -t public.ecr.aws/u5b2p7i3/job_scanner/crawling:extract_crawler -f $GITHUB_WORKSPACE/Dockerfile $GITHUB_WORKSPACE
          docker push public.ecr.aws/u5b2p7i3/job_scanner/crawling:extract_crawler

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        run: |
          # SSH 키 설정
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem

          # EC2에 접속하여 작업 수행
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e

            # 처리할 이미지 목록
            IMAGES=(
              "public.ecr.aws/u5b2p7i3/job_scanner/crawling:link_crawler"
              "public.ecr.aws/u5b2p7i3/job_scanner/crawling:post_crawler"
              "public.ecr.aws/u5b2p7i3/job_scanner/crawling:text_crawler"
              "public.ecr.aws/u5b2p7i3/job_scanner/crawling:extract_crawler"
            )

            # 반복문으로 처리
            for IMAGE in "${IMAGES[@]}"; do
              # 컨테이너 중지 및 삭제
              docker ps -a --filter "ancestor=$IMAGE" -q | xargs -r docker rm -f
              # 이미지 삭제
              docker rmi $IMAGE || true
              # 최신 이미지 Pull
              docker pull $IMAGE
            done
          EOF
